// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())

  email String @unique
  password String

  roles Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  surname String

  // Employee fields
  CV CV?

  // Employer fields
  vacancies Vacancy[]

  //Freelancer fields
  portfolioLinks String[]

  //Customer fields
  orders Order[]

}

model Vacancy {
  id          String        @id @default(cuid())

  salary      Int?
  minSalary   Int?
  maxSalary   Int?

  currency Currency
  
  heading     String
  description String

  priority Priority

  createdAt DateTime @default(now())

  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  applications Application[]
}

model CV {
  id       String        @id @default(cuid())
  content  String

  userID   String @unique
  user     User          @relation(fields: [userID], references: [id], onDelete: Cascade)

  applications Application[] 
}

model Application {
  id         String   @id @default(cuid())

  cv         CV       @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId       String

  vacancy    Vacancy  @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  vacancyId  String

  status ApplicationStatus @default(Pending)

  createdAt  DateTime @default(now())

  @@unique([cvId, vacancyId]) 
}

model Order{
  id String @id @default(cuid())

  payment     Int
  currency Currency

  heading     String
  description String

  priority Priority

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

}

enum Role {
  Employee
  Employer
  Customer
  Freelancer
}

enum Priority {
  Normal
  Immediate
}

enum ApplicationStatus {
  Pending   
  Accepted   
  Rejected   
}

enum Currency {
  USD
  EUR
  UAH
}




